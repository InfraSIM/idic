# Get all network interfaces 
# $1 - interface prefix, such as "eth" or "br"
network_interface_list()
{
	int_prefix=$1	
	[ -z "$int_prefix" ] && return 

	intf_list=$(find /sys/class/net -type l -name "${int_prefix}*" -exec basename {} \;) 
	set -- ${intf_list}
    echo "$@"
}

# Check if bridge exists.
# $1 - Bridge name
check_bridge()
{
	brint=$1

	brint_list=$(network_interface_list "br")
	for b in ${brint_list};do
		[ "${b}" == "${brint}" ] && return 1
	done
	return 0
}

# Get the interface list binded to bridge
# $1 - bridge name
binded_inteface_list_on_bridge()
{
	br=$1
	[ -z "$br" ] && return 
	check_bridge $br
	[ $? -eq 0 ] && return 
	binding_intf_list=$(find /sys/class/net/$br/brif -type l -exec basename {} \;)
    set -- ${binding_intf_list}
	echo "$@"
}

# Check if an interface was binded to a bridge
# $1 - bridge name
# $2 - interface name
check_interface()
{
	br=$1
	intf=$2
	[ -z "$br" -o  -z "$intf" ] && return 0

	binding_intf_list=$(binded_inteface_list_on_bridge $br)

	for i in $binding_intf_list;do
		[ $i == $intf ] && return 1
	done
	return 0
}

# Add an interface to bridge
# $1 - bridge name
# $2 - interface name
add_intf_to_bridge()
{
	br=$1
	intf=$2
	if [ -z "$br" ] || [ -z "$intf" ];then
		return 0
	fi

	check_bridge $br

	if [ $? -eq 0 ];then
		echo "Create bridge $br"
		brctl addbr $br
	fi
	
	check_interface $1 $2

	if [ $? -eq 1 ];then
		echo "Interface $intf is already binding to bridge ${br}."
		return 1
	fi
	
	echo "Adding interface $intf on bridge $br"
	brctl addif $br $intf
	brctl setfd $br 0
	brctl sethello $br 1
	brctl stp $br no
}

ifup_interface()
{
    [ -n "$1" ] || return 0

    #
    # Add interface to configuration into /etc/network/interfaces
    # 

    [ -e "/etc/network/interfaces" ] || return 0

    if grep -qs "^auto $1" /etc/network/interfaces;then
        return 1
    else
        sed -i "$ a\auto $1" /etc/network/interfaces
        sed -i "$ a\iface $1 inet dhcp" /etc/network/interfaces
    fi
    
    ifup $1 up

    return 1
}

# Delete all bridges except bridge 0
delete_bridge()
{
	br=$1

	[ -n "$br" ] || return 1

	bridge_intf_list=$(network_interface_list "br")
	for b in $bridge_intf_list;do

		[ $b == "br0" ] && continue
		
		binding_intf_list=$(binded_inteface_list_on_bridge $b)			

		for n in $binding_intf_list;do
			echo "Deleting interface $n on bridge $b"
			brctl delif $b $n
		done
		brctl delbr $b
		echo "Deleting bridge $b"
	done
}

