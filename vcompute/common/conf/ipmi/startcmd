#!/bin/sh

do_log() {
    [ -n "$1" ] && logger -t $0 "$1"
}

source /etc/ipmi/network.function

format_and_mount_disk()
{
    d=$1
    part_num=$(fdisk -l | grep -c "/dev/${d}1")
    if [ ${part_num} == "0" ];then
            do_log "Parition for disk $d..."
            echo "n
            p
            1
            
            
            w
            " | fdisk "/dev/$d"

            sleep 1
            mkfs.ext2 /dev/${d}1
            if [ $? -ne 0 ];then
                sleep 1
                mkfs.ext2 /dev/${d}1
            fi

            sleep 1
    fi

    target_mount_point=/vmdisk_${d}
    [ ! -d ${target_mount_point} ] && mkdir -p ${target_mount_point}

    : ${mounted:=false}
    while read DEV MTPT REST; do
        if [ "$DEV" ==  "/dev/${d}1" ];then
            mounted=true
        fi
    done < /proc/mounts

    if ! $mounted;then
        mount -t ext2 /dev/${d}1 ${target_mount_point}
    fi
}

QEMU_SYSTEM_X86_64=$(which qemu-system-x86_64)
if [ -e ${QEMU_SYSTEM_X86_64} ]; then
	# figure out the amount of memory to allocate to the KVM, leave 512to the host
	if [ -z "${VMEM}" ]; then
	   export VMEM=`cat /proc/meminfo  | grep MemTotal | awk '{print $2}'`
	   VMEM=`expr ${VMEM} / 1024 - 512`
	   if [[ ! ${VMEM} -gt 0 ]]; then
	      VMEM=512;
	   fi
	   export VMEM="${VMEM}"
	fi

    do_log "size of virtual host memory: ${VMEM}"

	# set number of smp cores, leave 2 unused for the host
	if [ -z "${VSMP}" ]; then
	   CPUCNT=`cat /proc/cpuinfo | grep -c processor`
	   VSMP=`expr ${CPUCNT} - 2`
	   if [[ ! ${VSMP} -gt 0 ]]; then
	      VSMP=1
	   fi
	   export VSMP="${VSMP}"
	fi
    do_log "number of virtual host cpu's: ${VSMP}"

    export KVM_FEATURE="--enable-kvm"
    KVM_ENABLE=$(cat /proc/cpuinfo | grep vmx)
    if [ -z "${KVM_ENABLE}" ]; then
		KVM_FEATURE=""
    fi
    do_log "virtual host KVM feature: ${KVM_FEATURE}"

	# create disk partition for qemu disk image
    disks=$(find /sys/block -type l -name "sd*" -exec basename {} \;)

    index=0
    disk_index=0
    controller_index=0

    DRIVE_OPTION=" "
    CONTROLLER_OPTION=""
    disk_index=0
    CONTROLLER_TYPE="ahci"
    MAX_DISK_INDEX_PER_CONTROLLER=6
    for d in $disks
    do
        [ $d == "sda" ] && continue
        #qemu will operate the raw disk

        #format_and_mount_disk $d

        # Get disk size
        #size_sector=$(cat /sys/block/${d}/size)

        #size=$(expr ${size_sector} / 2 / 1024)

        #do_log "Disk ${d} size: $size MB"

        #[ ! -e ${target_mount_point}/${d}.img ] && qemu-img create -f raw ${target_mount_point}/${d}.img ${size}M
        
        mod=`expr $disk_index \% ${MAX_DISK_INDEX_PER_CONTROLLER}`
        if [ $mod -eq 0 ] && [ $index -ne 0 ];then
            index=0
            let controller_index+=1
        fi
        # Compose drive option for Qemu
        case $CONTROLLER_TYPE in
            lsi|megasas)
                DRIVE_OPTION=${DRIVE_OPTION}"-drive file=/dev/${d},if=none,id=${d},media=disk -device scsi-disk,drive=${d},bus=scsi${controller_index}.0 "
                ;;
            ahci)
                DRIVE_OPTION=${DRIVE_OPTION}"-drive file=/dev/${d},if=none,id=${d} -device ide-drive,drive=${d},bus=ahci${controller_index}.${index} "
                ;;
        esac
        let index+=1
        let disk_index+=1
    done
    do_log "drive option: \"${DRIVE_OPTION}\""

    for i in $(seq 0 $controller_index)
    do
        # device option for Qemu
        case $CONTROLLER_TYPE in
            lsi*|megasas*)
                CONTROLLER_OPTION=${CONTROLLER_OPTION}"-device ${CONTROLLER_TYPE},id=scsi${i} "
                ;;
            ahci)
                CONTROLLER_OPTION=${CONTROLLER_OPTION}"-device ${CONTROLLER_TYPE},id=ahci${i} "
                ;;
        esac
    done
    
    do_log "storage controller option: \"${CONTROLLER_OPTION}\""
    # Add network interfaces
    nic_index=0
    network_intf_list=$(network_interface_list "eth")
    NETWORK_OPTION=""

    for n in $network_intf_list;do
	   SUFFIX=`ifconfig $n | grep HWaddr | awk '{print $5}' | cut -c13-20`
	   VNETMAC="52:54:BE:EF:${SUFFIX}"

       [ ! -e /etc/qemu/bridge.conf ] && touch /etc/qemu/bridge.conf

       if ! grep -qs "br${nic_index}" /etc/qemu/bridge.conf ;then
           echo "allow br${nic_index}" >> /etc/qemu/bridge.conf
       fi

       add_intf_to_bridge br${nic_index} $n
       ifup_interface br${nic_index}

       NETWORK_OPTION=${NETWORK_OPTION}"-device e1000,netdev=net${nic_index},mac=${VNETMAC} -netdev bridge,br=br${nic_index},helper=/libexec/qemu-bridge-helper,id=net${nic_index} "
       let nic_index+=1
    done
    do_log "network option: \"${NETWORK_OPTION}\""
 
    # Specify boot order drives as a string of drive letters. Valid drive letters depend on the target achitecture.
    # The x86 PC uses: a, b (floppy 1 and 2), c (first hard disk), d (first CD-ROM), n-p (Etherboot from network adapter 1-4),
    # hard disk boot is the default. To apply a particular boot order only on the first startup, specify it via .once.
    DEVICE=
    MENU=off
    if [ -e /boot/bootdev ]; then
        DEVICE=`cat /boot/bootdev`
    fi
    case $DEVICE in
        none)
        ORDER=ncd
        ;;
        pxe)
        ORDER=n
        ;;
        default)
        ORDER=c
        ;;
        cdrom)
        ORDER=d
        ;;
        bios)
        MENU=on
        ORDER=ncd
        ;;
        *)
        ORDER=ncd
        ;;
    esac

    if [ -e /etc/ipmi/smbios.bin ];then
        serial_number_prefix=""

        #Get chassis type
        chassis_type=$(dmidecode -t system | awk '/Serial Number/{print $(NF-4)}')
        case ${chassis_type} in
            "a2")
                serial_number_prefix="QTFCJT41"
                ;;
            "a4")
                serial_number_prefix="DELL6320"
                ;;
            *)
                ;;
        esac

        #Get serial number suffix
        serial_number_suffix=$(dmidecode -t system | \
            sed -n "/Serial Number/{s/^\(.*\)\-\([0-9a-z]\{2\} \)\{4\}\(.*\) [0-9a-z]\{2\}$/\3/g;s/ //g;p}")

        serial_number=${serial_number_prefix}${serial_number_suffix}

        if [ -e /usr/bin/smbiostool -a -n "${serial_number}" ];then
            smbiostool -f /etc/ipmi/smbios.bin -s ${serial_number} -t /etc/ipmi/new_smbios.bin
        fi

        if [ -e /etc/ipmi/new_smbios.bin ];then
            SMBIOS_OPTION="-smbios file=/etc/ipmi/new_smbios.bin"
        else
            SMBIOS_OPTION="-smbios file=/etc/ipmi/smbios.bin"
        fi
    fi

    BIOS_OPTION=""
    if [ -f /etc/ipmi/bios.bin ];then
        BIOS_OPTION="-bios /etc/ipmi/bios.bin"
    fi

    do_log "smbios option: \"${SMBIOS_OPTION}\""

    CMD="-vnc :1 ${KVM_FEATURE} -boot order=${ORDER},menu=${MENU} -device sga -chardev socket,id=ipmi0,host=localhost,port=9002,reconnect=10 -device ipmi-bmc-extern,chardev=ipmi0,id=bmc0 -device isa-ipmi-bt,bmc=bmc0 -device ich9-usb-ehci1 -serial mon:tcp:127.0.0.1:9003,nowait -m ${VMEM} -cpu Haswell,+vmx -smp ${VSMP} ${BIOS_OPTION} ${SMBIOS_OPTION} ${CONTROLLER_OPTION} ${DRIVE_OPTION} ${NETWORK_OPTION} -cdrom /dev/sr0 -machine vmport=off"

	do_log "starting virtual host..."
    do_log "qemu parameters: \"${CMD}\""

    retry=0
    # When there are multiple nodes on ESXi host, qemu will fail to start up
    # due to the port 9003 is not ready for listening. so add workaroud to 
    # wait port 9003 is up, and then try to start qemu process.
    while true;do

        [ $retry -gt 10 ] && break

        if ! netstat -tl | grep -qs "9003";then
            let retry++
            do_log "Wait on port 9003 up (retries: $retry)"
            sleep 1
            continue
        fi

        qemu-system-x86_64 ${CMD} >/var/log/qemu.log 2>&1 &

        # Sleep 500ms to wait qemu up
        sleep 0.5

        PID=`pidof qemu-system-x86_64`
        if [ ! "$PID" ]; then
            do_log "failed to start virtual host with command: \"qemu-system-x86_64 ${CMD}\""
            let retry++
            sleep 1
        else
            do_log "virtual host is now running (pid=${PID})"
            break
        fi
    done

    # one-shot boot device, restore default boot order
    echo "none" > /boot/bootdev
fi
